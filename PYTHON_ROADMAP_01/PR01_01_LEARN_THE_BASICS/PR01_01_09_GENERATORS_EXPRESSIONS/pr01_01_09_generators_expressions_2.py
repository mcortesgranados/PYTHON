# Python Generator Expressions Example

# Example 1: Creating a Generator Expression
# Generator expressions provide a concise way to create generators in Python.
# They are similar to list comprehensions but generate elements lazily, one at a time.
# Here's an example of creating a generator expression that yields squares of numbers:
squares_generator = (x**2 for x in range(1, 6))
# Explanation: This expression defines a generator that yields the square of each number from 1 to 5.
# The syntax is similar to list comprehension, but with parentheses () instead of square brackets [].
print("Generator Expression:", squares_generator)

# Example 2: Iterating Over a Generator
# You can iterate over the elements generated by a generator using a for loop or other iteration methods.
# Here's an example of iterating over the squares_generator:
print("Generated Squares:")
for square in squares_generator:
    print(square)

# Example 3: Generator Expression vs List Comprehension
# Generator expressions are memory-efficient compared to list comprehensions because they produce values on-the-fly.
# This is especially useful when dealing with large datasets or infinite sequences.
# Here's a comparison between a generator expression and a list comprehension:
import sys

# List Comprehension
list_comp = [x**2 for x in range(10**6)]
print("Memory used by List Comprehension:", sys.getsizeof(list_comp))

# Generator Expression
gen_expr = (x**2 for x in range(10**6))
print("Memory used by Generator Expression:", sys.getsizeof(gen_expr))

# Example 4: Generator Expressions with Conditionals
# Generator expressions can include conditional expressions to filter elements.
# Here's an example of using a conditional expression in a generator expression:
even_squares = (x**2 for x in range(1, 11) if x % 2 == 0)
# Explanation: This expression defines a generator that yields the square of even numbers from 1 to 10.
# The conditional expression 'if x % 2 == 0' filters out odd numbers.
print("Even Squares:")
for square in even_squares:
    print(square)

# Example 5: Using Generator Expressions with Functions
# Generator expressions can be passed directly to functions that accept iterables.
# This allows for more concise and readable code.
# Here's an example of using a generator expression with the sum() function:
sum_of_squares = sum(x**2 for x in range(1, 6))
# Explanation: This expression calculates the sum of squares of numbers from 1 to 5.
# The generator expression generates squares lazily, and the sum() function computes the sum.
print("Sum of Squares:", sum_of_squares)

# Documenting the Generator Expressions:
def generator_expressions_documentation():
    """
    This function demonstrates various aspects of generator expressions in Python.

    Example 1:
    - Creating a Generator Expression: How to define a generator expression in Python.

    Example 2:
    - Iterating Over a Generator: How to iterate over elements generated by a generator.

    Example 3:
    - Generator Expression vs List Comprehension: Comparison between memory usage of generator expressions and list comprehensions.

    Example 4:
    - Generator Expressions with Conditionals: How to use conditional expressions in generator expressions.

    Example 5:
    - Using Generator Expressions with Functions: How to pass generator expressions directly to functions.
    """
    pass

# End of examples
